@viewModel DotVVM.Samples.Common.ViewModels.FeatureSamples.JsComponentIntegration.ReactComponentIntegrationViewModel, DotVVM.Samples.Common
@js FeatureSamples_Resources_SvelteAppModule
@import viewModelType =DotVVM.Samples.Common.ViewModels.FeatureSamples.JsComponentIntegration.ReactComponentIntegrationViewModel
<!DOCTYPE html>

<html lang="en" xmlns="http://www.w3.org/1999/xhtml">
<head>
    <meta charset="utf-8" />
    <title>Svelte JSComponent</title>
</head>
<body>

    <h1>Svelte JSComponent Integration Demo</h1>

    <div data-ui="chart-control">
        <js:chart IncludeInPage={value: IncludeInPage}
                     data={value: Data}
                     onSelected={staticCommand: (string n) => CurrentThing = n}
                     html:class-test-class={value: true} />
    </div>


    <js:Button dataUI="command-regenerate" click={command: Regenerate()} text="Regenerate chart"/>
    <js:Button dataUI="command-removeDOM" click={staticCommand: IncludeInPage = false} text="Remove from DOM"/>
    <js:Button dataUI="command-addDOM" click={staticCommand: IncludeInPage = true} text="Add to DOM" />

    <p>
        CurrentThing:<span data-ui="result">{{value: CurrentThing}}</span>
    </p>


    <h3> Two way binding: </h3>

    <div>
        <js:incrementer i={value: Counter} html:data-ui="svelte-incrementer" />

        <div>
            DotVVM: <span data-ui="dotvvm-counter">{{value: Counter}}</span>
            <dot:Button Click={command: Counter = Counter + 1} html:data-ui="dotvvm-plus" Text="+" />
            <dot:Button Click={staticCommand: Counter = Counter - 1} html:data-ui="dotvvm-minus" Text="-" />
        </div>

    </div>
    <h3> Knockout templates rendered from Svelte JSComponent </h3>

    <dot:CheckBox Checked="{value: Condition}" data-ui="template-condition" Text="Condition for template selector" />

    <js:TemplateSelector condition={value: Condition} html:data-ui="template-selector">
        <template1>
            <span data-ui="template1">
                Condition == true (and IncludeInPage = {{value: IncludeInPage}})
            </span>
        </template1>
        <template2>
            <span data-ui="template2">
                Condition == false
            </span>
            <ul data-ui="template2-commandSection">
                <li>
                    <js:Button text="Test command" dataUI="template2-command" click="{command: ChangeCurrentThing()}"/>
                </li>
                <li>
                    <dot:Button Text="Test static command" data-ui="template2-clientStaticCommand" Click="{staticCommand:  CurrentThing = "StaticCommandInvoked"}" />
                </li>
                <li>
                    <dot:Button Text="Test server static command" data-ui="template2-serverStaticCommand" Click="{staticCommand: CurrentThing = viewModelType.GetCurrentThing() }" />
                </li>
                <li>
                    Counter: {{value: Counter}}
                </li>
            </ul>
        </template2>
    </js:TemplateSelector>

</body>
</html>
